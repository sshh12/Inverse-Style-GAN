import cv2
import time
import click
import pickle
import numpy as np
import face_recognition

# From https://github.com/NVlabs/stylegan
import sys; sys.path.append('../stylegan')
from dnnlib import tflib; tflib.init_tf()
from dnnlib import util
import config
FACE_MODEL_URL = "https://drive.google.com/uc?id=1MEGjdvVpUsu1jB4zrXZN7Y4kBBOzizDQ"


@click.command()
@click.option('--img_path',
    default='face.jpg',
    help='Path to query image.',
    type=click.Path())
@click.option('--output',
    default='best',
    help='Output file prefix.',
    type=click.Path())
@click.option('--max_iter',
    default=500,
    help='Maximum number of iterations.',
    type=int)
@click.option('--batch_size',
    default=20,
    help='Number of latents to test at a time',
    type=int)
@click.option('--seed',
    default=2,
    help='Randomness seed.',
    type=int)
def brute_force_find_face(img_path, output, max_iter, batch_size, seed):
    """
    Iteratively find the closest face that can be generated by StyleGAN.
    
    Note: By default, this script with save the best img and its latent vector
    to best.jpg and best.npy.
    """
    ref_img = cv2.cvtColor(cv2.imread(img_path), cv2.COLOR_RGB2BGR)
    ref_img_encoding = face_recognition.face_encodings(ref_img)[0]
    rnd = np.random.RandomState(seed)

    best_latent = rnd.randn(1, 512)
    best_dist = 9e9

    vec_to_image = make_generator()

    print('#s: 0 = perfect, 0.4 = could be the same person, 1 = worst')

    for i in range(max_iter):
        print('Best ({}/{}) = {}'.format(i, max_iter, round(best_dist, 5)))
        if i < 10:
            # Warmup w/completely random latents
            latents = rnd.randn(batch_size, 512)
        else:
            # Base latents off prev best
            latents = best_latent * 0.7 + rnd.randn(batch_size, 512) * 0.3
        images = vec_to_image(latents)
        for k in range(batch_size):
            image = images[k]
            try:
                gan_encoding = face_recognition.face_encodings(image)[0]
            except IndexError:
                continue
            dist = face_recognition.face_distance([ref_img_encoding], gan_encoding)[0]
            if dist < best_dist:
                best_dist = dist
                best_latent = latents[k]
                cv2.imwrite(output + '.jpg', cv2.cvtColor(image, cv2.COLOR_RGB2BGR))
                np.save(output + '.npy', best_latent)


def make_generator():
    """Make a simple func to convert latent vecs -> images"""
    with util.open_url(FACE_MODEL_URL, cache_dir=config.cache_dir) as f:
        _G, _D, Gs = pickle.load(f)
        fmt = dict(func=tflib.convert_images_to_uint8, nchw_to_nhwc=True)
        def gen(latents):
            images = Gs.run(latents, None, truncation_psi=0.7, 
                randomize_noise=True, 
                output_transform=fmt)
            return images
        return gen


if __name__ == '__main__':
    brute_force_find_face()